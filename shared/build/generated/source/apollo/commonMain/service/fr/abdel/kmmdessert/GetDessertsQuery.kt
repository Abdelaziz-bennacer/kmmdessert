// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package fr.abdel.kmmdessert

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.InputFieldMarshaller
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Any
import kotlin.Array
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import kotlin.collections.Map
import kotlin.jvm.Transient
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
data class GetDessertsQuery(
  val page: Int,
  val size: Int
) : Query<GetDessertsQuery.Data, GetDessertsQuery.Data, Operation.Variables> {
  @Transient
  private val variables: Operation.Variables = object : Operation.Variables() {
    override fun valueMap(): Map<String, Any?> = mutableMapOf<String, Any?>().apply {
      this["page"] = this@GetDessertsQuery.page
      this["size"] = this@GetDessertsQuery.size
    }

    override fun marshaller(): InputFieldMarshaller = InputFieldMarshaller.invoke { writer ->
      writer.writeInt("page", this@GetDessertsQuery.page)
      writer.writeInt("size", this@GetDessertsQuery.size)
    }
  }

  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = variables
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  /**
   * Dessert object with attributes name, description and imageUrl
   */
  data class Result(
    val __typename: String = "Dessert",
    val id: String,
    val userId: String,
    val name: String,
    val description: String,
    val imageUrl: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Result.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Result.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Result.userId)
      writer.writeString(RESPONSE_FIELDS[3], this@Result.name)
      writer.writeString(RESPONSE_FIELDS[4], this@Result.description)
      writer.writeString(RESPONSE_FIELDS[5], this@Result.imageUrl)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("userId", "userId", null, false, null),
          ResponseField.forString("name", "name", null, false, null),
          ResponseField.forString("description", "description", null, false, null),
          ResponseField.forString("imageUrl", "imageUrl", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Result = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val userId = readString(RESPONSE_FIELDS[2])!!
        val name = readString(RESPONSE_FIELDS[3])!!
        val description = readString(RESPONSE_FIELDS[4])!!
        val imageUrl = readString(RESPONSE_FIELDS[5])!!
        Result(
          __typename = __typename,
          id = id,
          userId = userId,
          name = name,
          description = description,
          imageUrl = imageUrl
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Result> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Info(
    val __typename: String = "PagingInfo",
    val count: Int,
    val pages: Int,
    val next: Int?,
    val previews: Int?
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Info.__typename)
      writer.writeInt(RESPONSE_FIELDS[1], this@Info.count)
      writer.writeInt(RESPONSE_FIELDS[2], this@Info.pages)
      writer.writeInt(RESPONSE_FIELDS[3], this@Info.next)
      writer.writeInt(RESPONSE_FIELDS[4], this@Info.previews)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forInt("count", "count", null, false, null),
          ResponseField.forInt("pages", "pages", null, false, null),
          ResponseField.forInt("next", "next", null, true, null),
          ResponseField.forInt("previews", "previews", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Info = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val count = readInt(RESPONSE_FIELDS[1])!!
        val pages = readInt(RESPONSE_FIELDS[2])!!
        val next = readInt(RESPONSE_FIELDS[3])
        val previews = readInt(RESPONSE_FIELDS[4])
        Info(
          __typename = __typename,
          count = count,
          pages = pages,
          next = next,
          previews = previews
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Info> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class Desserts(
    val __typename: String = "DessertsPage",
    val results: List<Result>,
    val info: Info
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Desserts.__typename)
      writer.writeList(RESPONSE_FIELDS[1], this@Desserts.results) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
      writer.writeObject(RESPONSE_FIELDS[2], this@Desserts.info.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forList("results", "results", null, false, null),
          ResponseField.forObject("info", "info", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Desserts = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val results = readList<Result>(RESPONSE_FIELDS[1]) { reader ->
          reader.readObject<Result> { reader ->
            Result(reader)
          }
        }!!.map { it!! }
        val info = readObject<Info>(RESPONSE_FIELDS[2]) { reader ->
          Info(reader)
        }!!
        Desserts(
          __typename = __typename,
          results = results,
          info = info
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Desserts> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val desserts: Desserts?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.desserts?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("desserts", "desserts", mapOf<String, Any?>(
            "page" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "page"),
            "size" to mapOf<String, Any?>(
              "kind" to "Variable",
              "variableName" to "size")), true, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val desserts = readObject<Desserts>(RESPONSE_FIELDS[0]) { reader ->
          Desserts(reader)
        }
        Data(
          desserts = desserts
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "a33f7fa57efafacd0f755cba33d398d28519c9e2222270459e1829337186da7e"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query GetDesserts(${'$'}page: Int!, ${'$'}size: Int!) {
          |  desserts(page: ${'$'}page, size: ${'$'}size) {
          |    __typename
          |    results {
          |      __typename
          |      id
          |      userId
          |      name
          |      description
          |      imageUrl
          |    }
          |    info {
          |      __typename
          |      count
          |      pages
          |      next
          |      previews
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "GetDesserts"
    }
  }
}
