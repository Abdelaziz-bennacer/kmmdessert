// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL plugin from the GraphQL queries it found.
// It should not be modified by hand.
//
package fr.abdel.kmmdessert

import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.OperationName
import com.apollographql.apollo.api.Query
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.api.ScalarTypeAdapters
import com.apollographql.apollo.api.ScalarTypeAdapters.Companion.DEFAULT
import com.apollographql.apollo.api.internal.OperationRequestBodyComposer
import com.apollographql.apollo.api.internal.QueryDocumentMinifier
import com.apollographql.apollo.api.internal.ResponseFieldMapper
import com.apollographql.apollo.api.internal.ResponseFieldMarshaller
import com.apollographql.apollo.api.internal.ResponseReader
import com.apollographql.apollo.api.internal.SimpleOperationResponseParser
import com.apollographql.apollo.api.internal.Throws
import kotlin.Array
import kotlin.Boolean
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.Buffer
import okio.BufferedSource
import okio.ByteString
import okio.IOException

@Suppress("NAME_SHADOWING", "UNUSED_ANONYMOUS_PARAMETER", "LocalVariableName",
    "RemoveExplicitTypeArguments", "NestedLambdaShadowedImplicitParameter")
class GetProfileQuery : Query<GetProfileQuery.Data, GetProfileQuery.Data, Operation.Variables> {
  override fun operationId(): String = OPERATION_ID
  override fun queryDocument(): String = QUERY_DOCUMENT
  override fun wrapData(data: Data?): Data? = data
  override fun variables(): Operation.Variables = Operation.EMPTY_VARIABLES
  override fun name(): OperationName = OPERATION_NAME
  override fun responseFieldMapper(): ResponseFieldMapper<Data> = ResponseFieldMapper.invoke {
    Data(it)
  }

  @Throws(IOException::class)
  override fun parse(source: BufferedSource, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = SimpleOperationResponseParser.parse(source, this, scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString, scalarTypeAdapters: ScalarTypeAdapters): Response<Data>
      = parse(Buffer().write(byteString), scalarTypeAdapters)

  @Throws(IOException::class)
  override fun parse(source: BufferedSource): Response<Data> = parse(source, DEFAULT)

  @Throws(IOException::class)
  override fun parse(byteString: ByteString): Response<Data> = parse(byteString, DEFAULT)

  override fun composeRequestBody(scalarTypeAdapters: ScalarTypeAdapters): ByteString =
      OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = scalarTypeAdapters
  )

  override fun composeRequestBody(): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = false,
    withQueryDocument = true,
    scalarTypeAdapters = DEFAULT
  )

  override fun composeRequestBody(
    autoPersistQueries: Boolean,
    withQueryDocument: Boolean,
    scalarTypeAdapters: ScalarTypeAdapters
  ): ByteString = OperationRequestBodyComposer.compose(
    operation = this,
    autoPersistQueries = autoPersistQueries,
    withQueryDocument = withQueryDocument,
    scalarTypeAdapters = scalarTypeAdapters
  )

  data class User(
    val __typename: String = "User",
    val id: String,
    val email: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@User.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@User.id)
      writer.writeString(RESPONSE_FIELDS[2], this@User.email)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("email", "email", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): User = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val email = readString(RESPONSE_FIELDS[2])!!
        User(
          __typename = __typename,
          id = id,
          email = email
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<User> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Dessert object with attributes name, description and imageUrl
   */
  data class Dessert(
    val __typename: String = "Dessert",
    val id: String,
    val userId: String,
    val name: String,
    val description: String,
    val imageUrl: String
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@Dessert.__typename)
      writer.writeString(RESPONSE_FIELDS[1], this@Dessert.id)
      writer.writeString(RESPONSE_FIELDS[2], this@Dessert.userId)
      writer.writeString(RESPONSE_FIELDS[3], this@Dessert.name)
      writer.writeString(RESPONSE_FIELDS[4], this@Dessert.description)
      writer.writeString(RESPONSE_FIELDS[5], this@Dessert.imageUrl)
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forString("id", "id", null, false, null),
          ResponseField.forString("userId", "userId", null, false, null),
          ResponseField.forString("name", "name", null, false, null),
          ResponseField.forString("description", "description", null, false, null),
          ResponseField.forString("imageUrl", "imageUrl", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): Dessert = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val id = readString(RESPONSE_FIELDS[1])!!
        val userId = readString(RESPONSE_FIELDS[2])!!
        val name = readString(RESPONSE_FIELDS[3])!!
        val description = readString(RESPONSE_FIELDS[4])!!
        val imageUrl = readString(RESPONSE_FIELDS[5])!!
        Dessert(
          __typename = __typename,
          id = id,
          userId = userId,
          name = name,
          description = description,
          imageUrl = imageUrl
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Dessert> = ResponseFieldMapper { invoke(it) }
    }
  }

  data class GetProfile(
    val __typename: String = "Profile",
    val user: User,
    val desserts: List<Dessert>
  ) {
    fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeString(RESPONSE_FIELDS[0], this@GetProfile.__typename)
      writer.writeObject(RESPONSE_FIELDS[1], this@GetProfile.user.marshaller())
      writer.writeList(RESPONSE_FIELDS[2], this@GetProfile.desserts) { value, listItemWriter ->
        value?.forEach { value ->
          listItemWriter.writeObject(value.marshaller())}
      }
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forString("__typename", "__typename", null, false, null),
          ResponseField.forObject("user", "user", null, false, null),
          ResponseField.forList("desserts", "desserts", null, false, null)
          )

      operator fun invoke(reader: ResponseReader): GetProfile = reader.run {
        val __typename = readString(RESPONSE_FIELDS[0])!!
        val user = readObject<User>(RESPONSE_FIELDS[1]) { reader ->
          User(reader)
        }!!
        val desserts = readList<Dessert>(RESPONSE_FIELDS[2]) { reader ->
          reader.readObject<Dessert> { reader ->
            Dessert(reader)
          }
        }!!.map { it!! }
        GetProfile(
          __typename = __typename,
          user = user,
          desserts = desserts
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<GetProfile> = ResponseFieldMapper { invoke(it) }
    }
  }

  /**
   * Data from the response after executing this GraphQL operation
   */
  data class Data(
    val getProfile: GetProfile?
  ) : Operation.Data {
    override fun marshaller(): ResponseFieldMarshaller = ResponseFieldMarshaller.invoke { writer ->
      writer.writeObject(RESPONSE_FIELDS[0], this@Data.getProfile?.marshaller())
    }

    companion object {
      private val RESPONSE_FIELDS: Array<ResponseField> = arrayOf(
          ResponseField.forObject("getProfile", "getProfile", null, true, null)
          )

      operator fun invoke(reader: ResponseReader): Data = reader.run {
        val getProfile = readObject<GetProfile>(RESPONSE_FIELDS[0]) { reader ->
          GetProfile(reader)
        }
        Data(
          getProfile = getProfile
        )
      }

      @Suppress("FunctionName")
      fun Mapper(): ResponseFieldMapper<Data> = ResponseFieldMapper { invoke(it) }
    }
  }

  companion object {
    const val OPERATION_ID: String =
        "785e8b13bfaf69e27ecc848d94a8ebc06f3c738aff0dc1467a455ce6ae0cdcd1"

    val QUERY_DOCUMENT: String = QueryDocumentMinifier.minify(
          """
          |query GetProfile {
          |  getProfile {
          |    __typename
          |    user {
          |      __typename
          |      id
          |      email
          |    }
          |    desserts {
          |      __typename
          |      id
          |      userId
          |      name
          |      description
          |      imageUrl
          |    }
          |  }
          |}
          """.trimMargin()
        )

    val OPERATION_NAME: OperationName = object : OperationName {
      override fun name(): String = "GetProfile"
    }
  }
}
